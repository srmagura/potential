# Numerical solver for the Helmholtz equation over an irregular 2D domain
Author: Sam Magura (śȑmȧgũŗa@ncsu.edu without the accents)
License: GPL

DISCLAIMER: This code was created to test a specific algorithm for mathematical research --- it was never intended for an end user. For your own sanity, you should contact the author before trying to use this code for anything.

This software package contains a solver for the Helmholtz equation over the two-dimensional "pizza domain" i.e. a disk with a wedge removed. The solver uses finite differences and the method of difference potentials.

Requires Python 3.x as well as the Python packages listed in requirements.txt. To install the packages:
$ pip install -r requirements.txt

## How to run
Command-line interface help:
$ python3 run.py -h

## References
[R1] M. Medvinsky, S. Tsynkov, E. Turkel. "The Method of Difference Potentials for the Helmholtz Equation Using Compact High Order Schemes." Journal of Scientific Computation 53 (2012).
[R2] S. Magura. ["Solving the Helmholtz equation via difference potentials on a domain with a reentrant corner."](http://www4.ncsu.edu/~srmagura/media/ma491_paper.pdf)
[R3] D. S. Britt, S. V. Tsynkov, E. Turkel. "A high-order numerical method for the Helmholtz equation with nonstandard boundary conditions." SIAM Journal of Scientific Computation 35:5 (2013).
[R4] S. Britt, S. Petropavlovsky, S. Tsynkov, E. Turkel. "Computation of singular solutions to the Helmholtz equation with high order accuracy." Applied Numerical Mathematics 93 (July 2015).

Comments in the code may reference these papers.

## Testing
The primary way to test this software is to ensure that all problems are solved with the expected convergence rate. (The help for the command-line interface lists all defined problems.)

There is also some unit testing. Unit tests are in the test directory.

To run them:
$ python3 -m unittest
from the project's base directory. Python's automatic test discovery is used.

## Naming conventions
There will undoubtedly be differences in variable names when comparing this software package to our research papers. At the very least, we attempt to be internally consistent. The variable names match up most closely with [R2], since I wrote that paper by myself.

Here are some naming conventions that are used throughout the project:

n_<something> -- shorthand notation for "number of <something>'s"
eval_f(...) -- evaluate the (mathematical) function f
d_f_x -- partial derivative of f with respect to x
d2_f_x -- second partial derivative of f with respect to x
d2_f_x_y -- partial derivative of f with respect to x and y (mixed partial)
th -- shorthand for theta
